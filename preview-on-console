#!/bin/bash

set -euC
# set -o pipefail

fifo_path='/tmp/preview_on_console_fifo'
cache_directory='/tmp/preview_on_console_cache'
last_image_file=''

function make_cache_path() {
  local file_path="$1"
  local hash

  hash=$(
    sha256sum "$file_path" | awk '{print $1}'
  )
  echo "${cache_directory}/${hash}.png"
}

function preview_pdf() {
  local pdf_path="$1"
  local page="${2:-1}"

  local temp_image cache_path

  cache_path=$(make_cache_path "$pdf_path")

  if [ -f "$cache_path" ]
  then
    preview_image "$cache_path"
    return 0
  fi

  command -v pdftoppm &>/dev/null || return 1
  command -v kitty &>/dev/null || return 1

  temp_image=$(mktemp --suffix=.png)
  if ! pdftoppm -f "$page" -l "$page" -png -scale-to-x 800 -scale-to-y -1 "$pdf_path" >| "$temp_image" 2>/dev/null
  then
    rm -f "$temp_image"
    echo "Failed to convert PDF: $pdf_path"
    return 1
  fi

  if ! mv "$temp_image" "$cache_path"
  then
    rm -f "$temp_image"
    echo "Failed to cache PDF preview: $cache_path"
    return 1
  fi
  preview_image "$cache_path"
}

function preview_image() {
  local image_path="$1"
  command -v kitty &>/dev/null || return 1
  printf '\033c'
  kitty icat --stdin=no --transfer-mode=file  "$image_path"
}


function preview_file() {
  local file_path="$1"
  
  # Validate file path
  if [[ -z "$file_path" ]]
  then
    echo "Error: Empty file path" >&2
    return 1
  fi
  
  # Check if file exists and is readable
  if [[ ! -f "$file_path" ]]
  then
    echo "Error: File not found: $file_path" >&2
    return 1
  fi
  
  if [[ ! -r "$file_path" ]]
  then
    echo "Error: File not readable: $file_path" >&2
    return 1
  fi
  
  [ "$file_path" = "$last_image_file" ] && return 0

  # Clear screen before preview
  printf '\033c'
  echo "Loading ..."

  local extension="${file_path##*.}"
  extension="${extension,,}"

  case "$extension" in
    jpg|jpeg|png|gif|bmp)
      preview_image "$file_path"
      ;;
    pdf)
      preview_pdf "$file_path"
      ;;
    *)
      echo "Unsupported file type: $extension"
      return
      ;;
  esac

  last_image_file="$file_path"
  echo "$file_path"
}

if ! mkdir -p "$cache_directory"
then
  echo "Error: Failed to create cache directory: $cache_directory" >&2
  exit 1
fi

while true
do
  if [[ ! -p "$fifo_path" ]]
  then
    echo "Creating FIFO: $fifo_path"
    if ! mkfifo "$fifo_path"; then
      echo "Error: Failed to create FIFO: $fifo_path" >&2
      sleep 1
      continue
    fi
  fi
  
  while read -r filepath
  do
    preview_file "$filepath" ||:
  done < "$fifo_path"
  
  # Small delay to prevent high CPU usage when FIFO is closed
  sleep 0.1
done
