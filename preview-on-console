#!/bin/bash

set -euC
# set -o pipefail

fifo_path='/tmp/preview_on_console_fifo'
cache_directory='/tmp/preview_on_console_cache'
last_image_file=''

opt_page=1

function make_cache_path() {
  local file_path="$1"
  local suffix="${2:-}"
  local hash

  hash=$(
    sha256sum "${file_path}" | awk '{print $1}'
  )
  [[ -n "$suffix" ]] && suffix="_${suffix}"
  echo "${cache_directory}/${hash}${suffix}.png"
}

function preview_pdf() {
  local pdf_path="$1"
  local page="${2:-1}"
  local temp_image cache_path last_page

  # If minus is used, it means the last page
  if [[ "$page" == -* ]]
  then
    last_page=$(
      pdfinfo "$pdf_path" 2>/dev/null | grep -oP 'Pages:\s+\K\d+' || echo 1
    )
    page=$((last_page + page + 1))
  fi

  cache_path=$(make_cache_path "${pdf_path}" "page=${page}")
  echo "$cache_path"

  if [ -f "$cache_path" ]
  then
    preview_image "$cache_path"
    return 0
  fi

  command -v pdftoppm &>/dev/null || return 1
  command -v kitty &>/dev/null || return 1

  temp_image=$(mktemp --suffix=.png)
  if ! pdftoppm -f "$page" -l "$page" -png -scale-to-x 800 -scale-to-y -1 "$pdf_path" >| "$temp_image" 2>/dev/null
  then
    rm -f "$temp_image"
    echo "Failed to convert PDF: $pdf_path"
    return 1
  fi

  if ! mv "$temp_image" "$cache_path"
  then
    rm -f "$temp_image"
    echo "Failed to cache PDF preview: $cache_path"
    return 1
  fi
  preview_image "$cache_path"
}

function preview_svg() {
  local svg_path="$1"
  local cache_path

  cache_path=$(make_cache_path "$svg_path")

  if [ -f "$cache_path" ]
  then
    preview_image "$cache_path"
    return 0
  fi

  command -v rsvg-convert &>/dev/null || return 1

  if ! rsvg-convert -w 800 -f png "$svg_path" -o "$cache_path" 2>/dev/null
  then
    echo "Failed to convert SVG: $svg_path"
    return 1
  fi

  preview_image "$cache_path"
}

function preview_image() {
  local image_path="$1"
  command -v kitty &>/dev/null || return 1
  printf '\033c'
  kitty icat --stdin=no --transfer-mode=file  "$image_path"
}


function preview_file() {
  local file_path="$1"

  [ -d "$file_path" ] && return 0

  # Check if file exists and is readable
  if [[ ! -f "$file_path" ]]
  then
    echo "Error: File not found: $file_path" >&2
    return 1
  fi

  if [[ ! -r "$file_path" ]]
  then
    echo "Error: File not readable: $file_path" >&2
    return 1
  fi

  [ "$file_path" = "$last_image_file" ] && return 0

  # Clear screen before preview
  printf '\033c'
  echo "Loading ..."

  local extension="${file_path##*.}"
  extension="${extension,,}"

  case "$extension" in
    jpg|jpeg|png|gif|bmp|webp)
      preview_image "$file_path"
      ;;
    svg)
      preview_svg "$file_path"
      ;;
    pdf)
      preview_pdf "$file_path" "$opt_page"
      ;;
    *)
      echo "Unsupported file type: $extension"
      return
      ;;
  esac

  last_image_file="$file_path"
  echo "$file_path"
}

function cache_files_in_directory() {
  local directory_path="$1"
  mkdir -p "$cache_directory" || return 1

  echo "Caching files in: $directory_path"

  local files=()
  while IFS= read -r -d '' file_path; do
    files+=("$file_path")
  done < <(find "$directory_path" -type f \( -name "*.svg" -o -name "*.pdf" \) -print0)

  local total_files=${#files[@]}
  local current_count=0

  for file_path in "${files[@]}"; do
    current_count=$((current_count + 1))
    local extension="${file_path##*.}"
    extension="${extension,,}"

    echo "$current_count of $total_files"

    case "$extension" in
      svg)
        preview_svg "$file_path" >/dev/null 2>&1
        ;;
      pdf)
        preview_pdf "$file_path" 1 >/dev/null 2>&1
        ;;
    esac
  done

  echo "Caching completed"
}

function parse_options() {
  while getopts ":p:c:" opt; do
    case $opt in
      p)
        opt_page="$OPTARG"
        if ! [[ "$opt_page" =~ ^-?[0-9]+$ ]]
        then
          echo "Invalid page number: $opt_page" >&2
          exit 1
        fi
        ;;
      c)
        if [[ ! -d "$OPTARG" ]]
        then
          echo "Error: Directory not found: $OPTARG" >&2
          exit 1
        fi
        cache_files_in_directory "$OPTARG"
        ;;
      \?)
        echo "Invalid option: -$OPTARG" >&2
        exit 1
        ;;
      :)
        echo "Option -$OPTARG requires an argument." >&2
        exit 1
        ;;
    esac
  done
}

function main() {
  if ! mkdir -p "$cache_directory"
  then
    echo "Error: Failed to create cache directory: $cache_directory" >&2
    exit 1
  fi

  while true
  do
    if [[ ! -p "$fifo_path" ]]
    then
      echo "Creating FIFO: $fifo_path"
      if ! mkfifo "$fifo_path"; then
        echo "Error: Failed to create FIFO: $fifo_path" >&2
        sleep 1
        continue
      fi
    fi

    while read -r filepath
    do
      preview_file "$filepath" ||:
    done < "$fifo_path"

    # Small delay to prevent high CPU usage when FIFO is closed
    sleep 0.1
  done
}

parse_options "$@"
main
